# @format

AWSTemplateFormatVersion: '2010-09-09'

Description: AppSync GraphQLApi AWS Cloudformation

Parameters:
  StackName:
    Type: String

  UserPoolId:
    Type: String

  StocksPriceDynamoDBTableRef:
    Type: String

  UsersDynamoDBTableRef:
    Type: String

  InvestmentsDynamoDBTableRef:
    Type: String

Resources:
  AppSyncGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Description: AppSync GraphQLApi
    Properties:
      AuthenticationType: AWS_IAM
      Name: !Sub ${StackName}-appsync-graphqlapi
      UserPoolConfig:
        UserPoolId: !Sub ${UserPoolId}
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: 'ALLOW'

  AppSyncGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Definition: |
        input UserInput {
          email: String
          firstName: String
          lastName: String
        }

        type User {
          id: ID!
          email: String
          firstName: String
          lastName: String
          portfolios: [Portfolio]!
        }
        input PortfolioInput {
          name: String!
        }
        type Portfolio {
          id: ID!
          name: String!
          createdAt: AWSDateTime!
          participation: PortfolioParticipation!
          stocksGroups: [PortfolioStocksGroup]!          
        }
        enum PortfolioParticipation {
          viewOnly
          participate
          owner
        }
        input PortfolioStocksGroupInput {
          name: String!
        }
        type PortfolioStocksGroup {
          id: ID!
          name: String!
          stocks: [PortfolioStock]!
        }
        input PortfolioStockInput {
          ticker: String!
          date: String!
          type: PortfolioStockType!
          value: Float!
          quantity: Int!
        }
        enum PortfolioStockType {
          ## Buy
          B
          ## Sell
          S
          ## Yield
          Y
        }
        type PortfolioStock {
          id: ID!
          index: Int!
          ticker: String!
          date: String!
          type: PortfolioStockType!
          value: Float!
          quantity: Int!
          mostRecentPrice: Float
        }
        type StockMetadata {
          AlphaVantageSymbol: String!
          ticker: String!
        }
        input StockMetadataInput {
          AlphaVantageSymbol: String!
          ticker: String!
        }
        type StockPrice {
          ticker: ID!
          date: AWSDateTime!
          price: Float!
        }
        input StockPriceInput {
          ticker: String!
          date: AWSDateTime!
          price: Float!
        }

        type Mutation {
          registerUser(userId: ID!, input: UserInput): User!

          newPortfolio(userId: ID!, input: PortfolioInput!): Portfolio!
          
          newPortfolioStocksGroup(portfolioId: ID!, input: PortfolioStocksGroupInput!): PortfolioStocksGroup!
          deletePortfolioStocksGroup(portfolioId: ID!, portfolioStocksGroupId: ID!): PortfolioStocksGroup!
          
          # Add portfolio stock
          addPortfolioStock(portfolioId: ID!, portfolioStocksGroupId: ID!, index: Int, input: PortfolioStockInput!): [PortfolioStock!]!
          removePortfolioStock(portfolioId: ID!, portfolioStocksGroupId: ID!, index: Int!): [PortfolioStock!]!
          
          # Admin register stock
          registerStock(stockMetadata: StockMetadataInput!): StockMetadata!
          # Admin unregister stock
          unregisterStock(ticker: String!): String!
          
        }
        type Query {
          user(userId: ID!): User
          searchUsers(key: String!): [User]
          portfolio(portfolioId: ID!): Portfolio
          allRegisteredStocks: [StockMetadata]!
          mostRecentStockPrice(ticker: ID!): StockPrice!
        }
        ## type Subscription {
        ## }
        schema {
          query: Query
          mutation: Mutation
          ## subscription: Subscription
        }

  ## Functions
  # A
  AddPortfolioStockAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: AddPortfolioStockAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        #set($portfolioStocksGroupId = $ctx.stash.portfolioStocksGroupId)
        #set($data = $ctx.stash.input)

        #set($stockData = "$data.ticker")
        #set($stockData = "$stockData $data.date")
        #set($stockData = "$stockData $data.type")
        #set($stockData = "$stockData $data.value")
        #set($stockData = "$stockData $data.quantity")
        ## Brokerage
        #set($stockData = "$stockData 0")

        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocksGroup_$portfolioStocksGroupId" }
          },
          #if($ctx.stash.index)
            "update": {
              "expression": "SET stocks[$ctx.stash.index] = :stockData",
              "expressionValues": {
                ":stockData": $util.dynamodb.toDynamoDBJson($stockData)
              }
            }
          #else
            "update": {
              "expression": "SET stocks = list_append(if_not_exists(stocks, :emptyList), :stockData)",
              "expressionValues": {
                ":stockData": $util.dynamodb.toDynamoDBJson([ $stockData ]),
                ":emptyList": { "L": [] }
              }
            }
          #end          
        }
      ResponseMappingTemplate: |
        #set($ctx.stash.hashKey = $ctx.result.hashKey)
        #set($ctx.stash.portfolioStocks = $ctx.result.stocks)
        $util.toJson($ctx.result.stocks)

  AllUserPortfoliosAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: AllUserPortfoliosAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: !Sub
        - |
          {
            "version": "2018-05-29",
            "operation": "BatchGetItem",
            #set($keys = [])
            #foreach($portfolioMetadata in $ctx.stash.userPortfoliosMetadata)
              #set($portfolioId = $portfolioMetadata.hashKey)
              $util.qr($keys.add({
                "hashKey": { "S" : "$portfolioId" },
                "rangeKey": { "S" : "details" }
              }))
            #end
            #if( $keys.isEmpty() )
              $util.qr($keys.add({
                "hashKey": { "S" : "fakeId" },
                "rangeKey": { "S" : "details" }
              }))
            #end
            "tables" : {
              "${TableName}": {
                "keys": $util.toJson($keys)
              }
            }
          }
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }
      ResponseMappingTemplate: !Sub
        - |
          #set($portfolios = $ctx.result.data["${TableName}"])
          #foreach($portfolio in $portfolios)
            #foreach($portfolioMetadata in $ctx.stash.userPortfoliosMetadata)
              #if($portfolio.hashKey == $portfolioMetadata.hashKey)
                #set($portfolio.id = $portfolio.hashKey)
                #set($portfolio.participation = $portfolioMetadata.participation)
              #end
            #end
          #end
          #if( !$portfolios[0] )
            $util.toJson([])
          #else
            $util.toJson($portfolios)
          #end
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }

  AllUserPortfoliosMetadataAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: AllUserPortfoliosMetadataAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($userId = $ctx.stash.userId)
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "index": "range-key-index",
          "query" : {
            "expression" : "rangeKey = :rangeKey",
            "expressionValues" : {
              ":rangeKey" : { "S" : "user_$userId" }
            }
          }
        }
      ResponseMappingTemplate: |
        #set($ctx.stash.userPortfoliosMetadata = $ctx.result.items)
        $util.toJson($ctx.result.items)

  # B
  # C
  # D
  DeletePortfolioStocksGroupAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: DeletePortfolioStocksGroupAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        #set($portfolioStocksGroupId = $ctx.stash.portfolioStocksGroupId)
        {
          "version" : "2017-02-28",
          "operation" : "DeleteItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocksGroup_$portfolioStocksGroupId" }
          }
        }
      ResponseMappingTemplate: |
        #set($deletedPortfolioStocksGroup = $ctx.result)
        #set($deletedPortfolioStocksGroup.id = $ctx.result.rangeKey.split("_")[1])
        #set($ctx.stash.deletedPortfolioStocksGroup = $deletedPortfolioStocksGroup)
        $util.toJson($deletedPortfolioStocksGroup)

  # G
  GetUsersAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: GetUsersAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt UsersAppSyncDataSource.Name
      RequestMappingTemplate: !Sub
        - |
          #set($keys = [])
          #if($ctx.prev.result)
            #foreach($user in $ctx.prev.result)
              $util.qr($keys.add({
                "hashKey": { "S" : "$user.hashKey" }
              }))
            #end
          #else
            $util.qr($keys.add({
              "hashKey": { "S" : "dumb" }
            }))
          #end
          {
            "version": "2018-05-29",
            "operation": "BatchGetItem",
            "tables" : {
              "${TableName}": {
                "keys": $util.toJson($keys)
              }
            }
          }
        - { TableName: !Sub '${UsersDynamoDBTableRef}' }
      ResponseMappingTemplate: !Sub
        - |
          #set($users = $ctx.result.data["${TableName}"])
          #foreach($user in $users)
            #set($user.id = $user.hashKey)
          #end
          $util.toJson($users)
        - { TableName: !Sub '${UsersDynamoDBTableRef}' }

  # M
  MapPortfolioStockAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: MapPortfolioStockAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt NoneAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
        }
      ResponseMappingTemplate: |
        #set($portfolioStocksGroupId = $ctx.stash.portfolioStocksGroupId)
        #set($stocks = [])
        #foreach( $stock in $ctx.stash.portfolioStocks )
          #set($stockSubstrings = $stock.split(" "))
          #set($stockObj = {
            "id": "$portfolioStocksGroupId - $foreach.index",
            "index": $foreach.index,
            "ticker": $stockSubstrings[0],
            "date": $stockSubstrings[1],
            "type": $stockSubstrings[2],
            "value": $stockSubstrings[3],
            "quantity": $stockSubstrings[4]
          })
          $util.qr($stocks.add($stockObj))
        #end
        #set($ctx.stash.portfolioStocks = $stocks)
        $util.toJson($stocks)

  MostRecentStockPriceAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: MostRecentStockPriceAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
            "expression" : "hashKey = :hashKey",
            "expressionValues" : {
              ":hashKey" : { "S" : "$ctx.stash.ticker" }
            }
          },
          "limit": 1,
          "scanIndexForward": false
        }
      ResponseMappingTemplate: |
        #set( $item = $ctx.result.items[0] )
        #set( $res = {
          "ticker": $item.hashKey,
          "date": $item.rangeKey,
          "price": $item.price
        })
        #set( $ctx.stash.mostRecentStockPrice = $res )
        $util.toJson($res)

  # N
  NewPortfolioAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: NewPortfolioAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: !Sub
        - |
          #set($portfolioId = $ctx.stash.portfolioId)
          #set($portfolioName = $ctx.stash.portfolioName)
          #set($userId = $ctx.stash.userId)
          #set($current = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "current"
          })
          #set($details = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "details",
            "name": "$portfolioName",
            "createdAt": "$util.time.nowISO8601()"
          })
          #set($user = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "user_$userId",
            "participation" : "owner"
          })
          #set($items = [
            $util.dynamodb.toMapValues($details),
            $util.dynamodb.toMapValues($current),
            $util.dynamodb.toMapValues($user)
          ])
          {
            "version" : "2018-05-29",
            "operation" : "BatchPutItem",
            "tables" : {
              "${TableName}": $util.toJson($items)
            }
          }
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }
      ResponseMappingTemplate: !Sub
        - |
          #set($newPortfolio = $ctx.result.data["${TableName}"][0])
          #set($newPortfolio.id = $ctx.stash.portfolioId)
          #set($newPortfolio.participation = "owner")
          #set($ctx.stash.newPortfolio = $newPortfolio)
          $util.toJson($newPortfolio)
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }

  NewPortfolioStocksGroupAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: NewPortfolioStocksGroupAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        #set($portfolioStocksGroupId = $util.autoId())
        #set($portfolioStocksGroupName = $ctx.stash.portfolioStocksGroupName)
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocksGroup_$portfolioStocksGroupId" }
          },
          "attributeValues" : {
            "name": { "S" : "$portfolioStocksGroupName" },
          }
        }
      ResponseMappingTemplate: |
        #set($newPortfolioStocksGroup = $ctx.result)
        #set($newPortfolioStocksGroup.id = $ctx.result.rangeKey.split("_")[1])
        #set($ctx.stash.newPortfolioStocksGroup = $newPortfolioStocksGroup)
        $util.toJson($newPortfolioStocksGroup)

  # O
  # P
  PortfolioStocksGroupsAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: PortfolioStocksGroupsAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
            "expression" : "hashKey = :hashKey AND begins_with(rangeKey, :rangeKey)",
            "expressionValues" : {
              ":hashKey" : { "S" : "$portfolioId" },
              ":rangeKey" : { "S" : "stocksGroup" },
            }
          }
        }
      ResponseMappingTemplate: |
        #set($portfolioStocksGroups = $ctx.result.items)
        #foreach($portfolioStocksGroup in $portfolioStocksGroups)
          #set($portfolioStocksGroup.id = $portfolioStocksGroup.rangeKey.split("_")[1])
        #end
        #set($ctx.stash.portfolioStocksGroups = $portfolioStocksGroups)
        $util.toJson($portfolioStocksGroups)

  # Q

  # R
  RemovePortfolioStockAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: RemovePortfolioStockAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        #set($portfolioStocksGroupId = $ctx.stash.portfolioStocksGroupId)
        #set($index = $ctx.stash.index)
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocksGroup_$portfolioStocksGroupId" }
          },
          "update": {
            "expression": "REMOVE stocks[$index]",
          }
        }
      ResponseMappingTemplate: |
        #set($ctx.stash.hashKey = $ctx.result.hashKey)
        #set($ctx.stash.portfolioStocks = $ctx.result.stocks)
        $util.toJson($ctx.result.stocks)

  # S
  SearchUsersAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: SearchUsersAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt UsersAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($key = $ctx.stash.key)
        {
          "version" : "2017-02-28",
          "operation" : "Scan",
          "index" : "index-search-helper",
          "limit" : 10,
          "filter" : {
            "expression" : "contains(searchHelper, :searchHelper)",
            "expressionValues" : {
              ":searchHelper" : { "S" : "$key" }
            },
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  # T
  # U
  # V
  # W
  # X
  # Y
  # Z

  ## User
  # portfolios
  PortfoliosUserAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AllUserPortfoliosMetadataAppSyncFunctionConfiguration
      - AllUserPortfoliosAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: User
      FieldName: portfolios
      Kind: PIPELINE
      RequestMappingTemplate: |
        $util.qr($ctx.stash.put("userId", $ctx.source.id))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt AllUserPortfoliosMetadataAppSyncFunctionConfiguration.FunctionId
          - !GetAtt AllUserPortfoliosAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ## Portfolio
  # stocksGroup
  StocksGroupsPortfolioAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - PortfolioStocksGroupsAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Portfolio
      FieldName: stocksGroups
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.portfolioId = $ctx.source.id)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt PortfolioStocksGroupsAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # # PortfolioStocksGroup
  StocksPortfolioStocksGroupAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - MapPortfolioStockAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: PortfolioStocksGroup
      FieldName: stocks
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.portfolioStocksGroupId = $ctx.source.id)
        #set($ctx.stash.portfolioStocks = $ctx.source.stocks)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt MapPortfolioStockAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ## PortfolioStock
  # lastPrice
  LastPricePortfolioStockAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - MostRecentStockPriceAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: PortfolioStock
      FieldName: lastPrice
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.ticker = $ctx.source.ticker)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt MostRecentStockPriceAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.price)

  ## Mutation
  # registerUser
  RegisterUserMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: registerUser
      DataSourceName: !GetAtt UsersAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($searchHelper = "")
        #if($ctx.args.input.firstName)
          #set($searchHelper = "$searchHelper$ctx.args.input.firstName.toLowerCase() ")
        #end
        #if($ctx.args.input.lastName)
          #set($searchHelper = "$searchHelper$ctx.args.input.lastName.toLowerCase() ")
        #end
        #set($searchHelper = "$searchHelper$ctx.args.userId.toLowerCase()")
        #set($ctx.args.input.searchHelper = $searchHelper)
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key": {
            "hashKey" : { "S" : "$ctx.args.userId" },
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input)
        }
      ResponseMappingTemplate: |
        #set($ctx.result.id = $ctx.result.hashKey)
        $util.toJson($ctx.result)

  # addPortfolioStock
  AddPortfolioStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AddPortfolioStockAppSyncFunctionConfiguration
      - MapPortfolioStockAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addPortfolioStock
      Kind: PIPELINE
      RequestMappingTemplate: |
        $util.qr($ctx.stash.put("portfolioId", $ctx.args.portfolioId))
        $util.qr($ctx.stash.put("portfolioStocksGroupId", $ctx.args.portfolioStocksGroupId))
        #if($ctx.args.index)
          $util.qr($ctx.stash.put("index", $ctx.args.index))
        #end
        $util.qr($ctx.stash.put("input", $ctx.args.input))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt AddPortfolioStockAppSyncFunctionConfiguration.FunctionId
          - !GetAtt MapPortfolioStockAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.portfolioStocks)

  # deletePortfolioStocksGroup
  DeletePortfolioStocksGroupMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: DeletePortfolioStocksGroupAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: deletePortfolioStocksGroup
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.portfolioId = $ctx.args.portfolioId)
        #set($ctx.stash.portfolioStocksGroupId = $ctx.args.portfolioStocksGroupId)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt DeletePortfolioStocksGroupAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.deletedPortfolioStocksGroup)

  # newPortfolio
  NewPortfolioMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: NewPortfolioAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: newPortfolio
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($id = $util.autoId())
        $util.qr($ctx.stash.put("portfolioId", $id))
        $util.qr($ctx.stash.put("portfolioName", $ctx.args.input.name))
        $util.qr($ctx.stash.put("userId", $ctx.args.userId))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt NewPortfolioAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.newPortfolio)

  # newPortfolioStocksGroup
  NewPortfolioStocksGroupMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: NewPortfolioStocksGroupAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: newPortfolioStocksGroup
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.portfolioId = $ctx.args.portfolioId)
        #set($ctx.stash.portfolioStocksGroupName = $ctx.args.input.name)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt NewPortfolioStocksGroupAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.newPortfolioStocksGroup)

  # registerStock
  RegisterStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: registerStock
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          },
          "update" : {
            "expression" : "SET #ticker = :ticker",
            "expressionNames" : {
                "#ticker" : "$ctx.args.stockMetadata.ticker"
            },
            "expressionValues" : {
                ":ticker" : $util.dynamodb.toDynamoDBJson($ctx.args.stockMetadata)
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.args.stockMetadata)

  # removePortfolioStock
  RemovePortfolioStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RemovePortfolioStockAppSyncFunctionConfiguration
      - MapPortfolioStockAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: removePortfolioStock
      Kind: PIPELINE
      RequestMappingTemplate: |
        $util.qr($ctx.stash.put("portfolioId", $ctx.args.portfolioId))
        $util.qr($ctx.stash.put("portfolioStocksGroupId", $ctx.args.portfolioStocksGroupId))
        $util.qr($ctx.stash.put("index", $ctx.args.index))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt RemovePortfolioStockAppSyncFunctionConfiguration.FunctionId
          - !GetAtt MapPortfolioStockAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.portfolioStocks)

  # unregisterStock
  UnregisterStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: unregisterStock
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          },
          "update" : {
            "expression" : "REMOVE $ctx.args.ticker",
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.args.ticker)

  ## Query
  # allRegisteredStocks
  AllRegisteredStocksQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: allRegisteredStocks
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          }
        }
      ResponseMappingTemplate: |
        #set ($tickers = [])
        #foreach( $item in $ctx.result.values() )
          #if( $item.ticker)
            $util.qr($tickers.add($item))
          #end
        #end
        $util.toJson($tickers)

  # mostRecentStockPrice
  MostRecentStockPriceQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: MostRecentStockPriceAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: mostRecentStockPrice
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.ticker = $ctx.args.ticker)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt MostRecentStockPriceAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # portfolio
  PortfolioQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: portfolio
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
            "hashKey" : { "S" : "$ctx.args.portfolioId" },
            "rangeKey": { "S" : "details" }
          }
        }
      ResponseMappingTemplate: |
        #set($portfolio = $ctx.result)
        #set($portfolio.id = $portfolio.hashKey)
        $util.toJson($portfolio)

  # user
  UserQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: user
      DataSourceName: !GetAtt UsersAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
            "hashKey" : { "S" : "$ctx.args.userId" },
          }
        }
      ResponseMappingTemplate: |
        #set($ctx.result.id = $ctx.result.hashKey)
        $util.toJson($ctx.result)

  # searchUsers
  SearchUsersyAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - SearchUsersAppSyncFunctionConfiguration
      - GetUsersAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: searchUsers
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.key = $ctx.args.key)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt SearchUsersAppSyncFunctionConfiguration.FunctionId
          - !GetAtt GetUsersAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ### DataSource
  NoneAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: DataSource
      Description: AppSync None data source
      Type: NONE

  StocksPriceAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: StocksPriceAppSyncDataSource
      Description: AppSync data source for stocks price
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${StocksPriceDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  UsersAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: UsersAppSyncDataSource
      Description: AppSync data source for user data
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${UsersDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  InvestmentsAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: InvestmentsAppSyncDataSource
      Description: AppSync data source for investments
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${InvestmentsDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  ### IAM ###
  AppSyncIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
      Path: /
      Policies:
        - PolicyName: !Sub ${StackName}-appsync-iam-role-logs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [':', ['arn:aws:logs', !Sub '${AWS::Region}', '*', '*']]
        - PolicyName: !Sub ${StackName}-appsync-iam-role-dynamodb-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                Resource: '*'

Outputs:
  AppSyncGraphQLApiEndpoint:
    Description: AppSync GraphQL API Endpoint
    Value: !GetAtt AppSyncGraphQLApi.GraphQLUrl
