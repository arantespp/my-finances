# @format

AWSTemplateFormatVersion: '2010-09-09'

Description: AppSync GraphQLApi AWS Cloudformation

Parameters:
  StackName:
    Type: String

  UserPoolId:
    Type: String

  StocksPriceDynamoDBTableRef:
    Type: String

  StocksPriceDynamoDBTableArn:
    Type: String

  UsersDynamoDBTableRef:
    Type: String

  UsersDynamoDBTableArn:
    Type: String

  InvestmentsDynamoDBTableRef:
    Type: String

  InvestmentsDynamoDBTableArn:
    Type: String

  IdentityPoolAuthorizedIAMRoleRef:
    Type: String

Resources:
  AppSyncGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Description: AppSync GraphQLApi
    Properties:
      AuthenticationType: AWS_IAM
      Name: !Sub ${StackName}-appsync-graphqlapi
      UserPoolConfig:
        UserPoolId: !Sub ${UserPoolId}
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: 'ALLOW'

  AppSyncGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Definition: |
        type User {
          id: ID!
          portfolios: [Portfolio]!
        }
        type Portfolio {
          id: ID!
          name: String!
          createdAt: AWSDateTime!
          participation: PortfolioParticipation!
          # participants: [PortfolioParticipants!]!
          # current: PortfolioData!
        }
        enum PortfolioParticipation {
          viewOnly
          participate
          owner
        }
        # type StockMetadata {
        #   AlphaVantageSymbol: String!
        #   ticker: String!
        # }
        # input StockMetadataInput {
        #   AlphaVantageSymbol: String!
        #   ticker: String!
        # }
        # type StockPrice {
        #   ticker: String!
        #   date: AWSDateTime!
        #   price: Float!
        # }
        # input StockPriceInput {
        #   ticker: String!
        #   date: AWSDateTime!
        #   price: Float!
        # }


        # type PortfolioParticipants {
        #   userId: ID!
        #   portfolioView: PortfolioView!
        # }

        type Mutation {
          newPortfolio(userId: ID!, portfolioName: String!): Portfolio!
          # registerStock(stockMetadata: StockMetadataInput!): StockMetadata!
          # unregisterStock(ticker: String!): String!
          # deletePortfolio(portfolioId: ID!): String!
          # allowUserToViewPortfolio(userId: ID!, portfolioId: ID!, kind: PortfolioView!): Boolean!
        }
        type Query {
          user(id: ID!): User
          portfolio(id: ID!): Portfolio
          # allRegisteredStocks: [StockMetadata]!
          # mostRecentStockPrice(ticker: String!): StockPrice!
          # allUserPortfolios(userId: ID!): [String]
        }
        ## type Subscription {
        ## }
        schema {
          query: Query
          mutation: Mutation
          ## subscription: Subscription
        }

  ## Functions
  NewPortfolioAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: NewPortfolioAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: !Sub
        - |
          #set($portfolioId = $ctx.stash.portfolioId)
          #set($portfolioName = $ctx.stash.portfolioName)
          #set($userId = $ctx.stash.userId)
          #set($current = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "current"
          })
          #set($details = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "details",
            "name": "$portfolioName",
            "createdAt": "$util.time.nowISO8601()"
          })
          #set($user = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "user_$userId",
            "participation" : "owner"
          })
          #set($items = [
            $util.dynamodb.toMapValues($details),
            $util.dynamodb.toMapValues($current),
            $util.dynamodb.toMapValues($user)
          ])
          {
            "version" : "2018-05-29",
            "operation" : "BatchPutItem",
            "tables" : {
              "${TableName}": $util.toJson($items)
            }
          }
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }
      ResponseMappingTemplate: !Sub
        - |
          #set($newPortfolio = $ctx.result.data["${TableName}"][0])
          #set($newPortfolio.id = $ctx.stash.portfolioId)
          #set($newPortfolio.participation = "owner")
          #set($ctx.stash.newPortfolio = $newPortfolio)
          $util.toJson($newPortfolio)
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }

  AllUserPortfoliosMetadataAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: AllUserPortfoliosMetadataAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($userId = $ctx.stash.userId)
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "index": "range-key-index",
          "query" : {
            "expression" : "rangeKey = :rangeKey",
            "expressionValues" : {              
              ":rangeKey" : { "S" : "user_$userId" }
            }
          }
        }
      ResponseMappingTemplate: |
        #set($ctx.stash.userPortfoliosMetadata = $ctx.result.items)
        $util.toJson($ctx.result.items)

  AllUserPortfoliosAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: AllUserPortfoliosAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: !Sub
        - |
          {
            "version": "2018-05-29",
            "operation": "BatchGetItem",
            #set($keys = [])
            #foreach($portfolioMetadata in $ctx.stash.userPortfoliosMetadata)
              #set($portfolioId = $portfolioMetadata.hashKey)
              $util.qr($keys.add({
                "hashKey": { "S" : "$portfolioId" },
                "rangeKey": { "S" : "details" }
              }))
            #end
            #if( $keys.isEmpty() )
              $util.qr($keys.add({
                "hashKey": { "S" : "fakeId" },
                "rangeKey": { "S" : "details" }
              }))
            #end
            "tables" : {
              "${TableName}": {
                "keys": $util.toJson($keys)
              }
            }
          }
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }
      ResponseMappingTemplate: !Sub
        - |
          #set($portfolios = $ctx.result.data["${TableName}"])
          #foreach($portfolio in $portfolios)
            #foreach($portfolioMetadata in $ctx.stash.userPortfoliosMetadata)
              #if($portfolio.hashKey == $portfolioMetadata.hashKey)
                #set($portfolio.id = $portfolio.hashKey)
                #set($portfolio.participation = $portfolioMetadata.participation)                
              #end
            #end
          #end
          #if( !$portfolios[0] )
            $util.toJson([])
          #else
            $util.toJson($portfolios)
          #end
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }

  ## User
  # portfolios
  PortfoliosUserAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: User
      FieldName: portfolios
      Kind: PIPELINE
      RequestMappingTemplate: |
        $util.qr($ctx.stash.put("userId", $ctx.source.id))        
        {}
      PipelineConfig:
        Functions:
          - !GetAtt AllUserPortfoliosMetadataAppSyncFunctionConfiguration.FunctionId
          - !GetAtt AllUserPortfoliosAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ## Mutation
  # newPortfolio
  NewPortfolioMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: NewPortfolioAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: newPortfolio
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($id = $util.autoId())
        $util.qr($ctx.stash.put("portfolioId", $id))
        $util.qr($ctx.stash.put("portfolioName", $ctx.args.portfolioName))
        $util.qr($ctx.stash.put("userId", $ctx.args.userId))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt NewPortfolioAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.newPortfolio)

  ## Query
  # user
  UserQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: user
      DataSourceName: !GetAtt NoneAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "payload": $utils.toJson($ctx.args)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # portfolio
  PortfolioQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: portfolio
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
            "hashKey" : { "S" : "$ctx.args.id" },
            "rangeKey": { "S" : "details" }
          }
        }
      ResponseMappingTemplate: |
        #set($portfolio = $ctx.result)
        #set($portfolio.id = $portfolio.hashKey)
        $util.toJson($portfolio)

  # AllowUserToViewPortfolioAppSyncFunctionConfiguration:
  #   Type: AWS::AppSync::FunctionConfiguration
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     Name: AllowUserToViewPortfolioAppSyncFunctionConfiguration
  #     FunctionVersion: 2018-05-29
  #     DataSourceName: !GetAtt UsersAppSyncDataSource.Name
  #     RequestMappingTemplate: |
  #       #set($userId = $ctx.stash.userId)
  #       #set($portfolioId = $ctx.stash.portfolioId)
  #       #set($allowUserToViewPortfolioKind = $ctx.stash.allowUserToViewPortfolioKind)
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "PutItem",
  #         "key" : {
  #           "hashKey" : { "S" : "$userId" },
  #           "rangeKey": { "S" : "portfolio_$portfolioId" }
  #         },
  #         "attributeValues" : {
  #           "kind": { "S" : "$allowUserToViewPortfolioKind" },
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       $util.toJson($ctx.result)

  # AllUserPortfoliosIdAppSyncFunctionConfiguration:
  #   Type: AWS::AppSync::FunctionConfiguration
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     Name: AllUserPortfoliosIdAppSyncFunctionConfiguration
  #     FunctionVersion: 2018-05-29
  #     DataSourceName: !GetAtt UsersAppSyncDataSource.Name
  #     RequestMappingTemplate: |
  #       #set($userId = $ctx.stash.userId)
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",
  #         "query" : {
  #           "expression" : "hashKey = :hashKey AND begins_with(rangeKey, :rangeKey)",
  #           "expressionValues" : {
  #             ":hashKey" : { "S" : "$userId" },
  #             ":rangeKey" : { "S" : "portfolio" }
  #           }
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       #set($portfoliosIds = [])
  #       #foreach($item in $ctx.result.items)
  #         #set($portfolioId = $item.rangeKey.split("_")[1])
  #         $util.qr($portfoliosIds.add($portfolioId))
  #       #end
  #       $util.toJson($portfoliosIds)

  # AllUserPortfoliosAppSyncFunctionConfiguration:
  #   Type: AWS::AppSync::FunctionConfiguration
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     Name: AllUserPortfoliosAppSyncFunctionConfiguration
  #     FunctionVersion: 2018-05-29
  #     DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
  #     RequestMappingTemplate: !Sub
  #       - |
  #         #set($userId = $ctx.stash.userId)
  #         #set($portfoliosIds = $ctx.stash.portfoliosIds)
  #         {
  #           "version": "2018-05-29",
  #           "operation": "BatchGetItem",
  #           #set($keys = [])
  #           #foreach($portfolioId in $portfoliosIds)
  #             $util.qr($tickers.add({
  #               "haskKey": "$portfolioId",
  #               "rangeKey": "details"
  #             }))
  #           #end
  #           "tables" : {
  #             "${TableName}": $util.toJson($keys)
  #           }
  #         }
  #       - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }
  #     ResponseMappingTemplate: !Sub
  #       - |
  #         $util.toJson($ctx.result.data[${TableName}])
  #       - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }

  ## Mutation
  # # registerStock
  # RegisterStockMutationAppSyncResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     TypeName: Mutation
  #     FieldName: registerStock
  #     DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "UpdateItem",
  #         "key" : {
  #           "hashKey" : { "S" : "metadata" },
  #           "rangeKey": { "S" : "tickers" }
  #         },
  #         "update" : {
  #           "expression" : "SET #ticker = :ticker",
  #           "expressionNames" : {
  #               "#ticker" : "$ctx.args.stockMetadata.ticker"
  #           },
  #           "expressionValues" : {
  #               ":ticker" : $util.dynamodb.toDynamoDBJson($ctx.args.stockMetadata)
  #           }
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       $util.toJson($ctx.args.stockMetadata)

  # # unregisterStock
  # UnregisterStockMutationAppSyncResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     TypeName: Mutation
  #     FieldName: unregisterStock
  #     DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "UpdateItem",
  #         "key" : {
  #           "hashKey" : { "S" : "metadata" },
  #           "rangeKey": { "S" : "tickers" }
  #         },
  #         "update" : {
  #           "expression" : "REMOVE $ctx.args.ticker",
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       $util.toJson($ctx.args.ticker)

  # # # deletePortfolio
  # # DeletePortfolioMutationAppSyncResolver:
  # #   Type: AWS::AppSync::Resolver
  # #   DependsOn: AppSyncGraphQLSchema
  # #   Properties:
  # #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  # #     TypeName: Mutation
  # #     FieldName: deletePortfolio
  # #     DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
  # #     RequestMappingTemplate: |
  # #       {
  # #         "version" : "2017-02-28",
  # #         "operation" : "DeleteItem",
  # #         "key" : {
  # #           "hashKey" : { "S" : "$ctx.args.userId" },
  # #           "rangeKey": { "S" : "portfolio_$id" }
  # #         }
  # #       }
  # #     ResponseMappingTemplate: |
  # #       $util.toJson($ctx.result)

  # # allowUserToViewPortfolio
  # AllowUserToViewPortfolioMutationAppSyncResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     TypeName: Mutation
  #     FieldName: allowUserToViewPortfolio
  #     DataSourceName: !GetAtt UsersAppSyncDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "PutItem",
  #         "key" : {
  #           "hashKey" : { "S" : "$ctx.args.userId" },
  #           "rangeKey": { "S" : "portfolio_$ctx.args.portfolioId" }
  #         },
  #         "attributeValues" : {
  #           "kind": { "S" : "$ctx.args.kind" },
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       $util.toJson($ctx.result)

  # allRegisteredStocks
  # AllRegisteredStocksQueryAppSyncResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: allRegisteredStocks
  #     DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "GetItem",
  #         "key" : {
  #           "hashKey" : { "S" : "metadata" },
  #           "rangeKey": { "S" : "tickers" }
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       #set ($tickers = [])
  #       #foreach( $item in $ctx.result.values() )
  #         #if( $item.ticker)
  #           $util.qr($tickers.add($item))
  #         #end
  #       #end
  #       $util.toJson($tickers)

  # # mostRecentStockPrice
  # MostRecentStockPriceQueryAppSyncResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: mostRecentStockPrice
  #     DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",
  #         "query" : {
  #           "expression" : "hashKey = :hashKey",
  #           "expressionValues" : {
  #             ":hashKey" : { "S" : "$ctx.args.ticker" }
  #           }
  #         },
  #         "limit": 1,
  #         "scanIndexForward": false
  #       }
  #     ResponseMappingTemplate: |
  #       #set( $item = $ctx.result.items[0] )
  #       $util.toJson({
  #         "ticker": $item.hashKey,
  #         "date": $item.rangeKey,
  #         "price": $item.price
  #       })

  # # allUserPortfolios
  # AllUserPortfoliosQueryAppSyncResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: allUserPortfolios
  #     Kind: PIPELINE
  #     RequestMappingTemplate: |
  #       $util.qr($ctx.stash.put("userId", $ctx.args.userId))
  #       {
  #       }
  #     PipelineConfig:
  #       Functions:
  #         - !GetAtt AllUserPortfoliosIdsAppSyncFunctionConfiguration.FunctionId
  #     ResponseMappingTemplate: |
  #       $util.toJson($ctx.prev.result)

  ### DataSource
  NoneAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: DataSource
      Description: AppSync None data source
      Type: NONE

  StocksPriceAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: StocksPriceAppSyncDataSource
      Description: AppSync data source for stocks price
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${StocksPriceDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  UsersAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: UsersAppSyncDataSource
      Description: AppSync data source for user data
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${UsersDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  InvestmentsAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: InvestmentsAppSyncDataSource
      Description: AppSync data source for investments
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${InvestmentsDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  ### IAM ###
  AppSyncIAMPolicy:
    Type: AWS::IAM::Policy
    Description: Allow user consume AppSync when signed in
    DependsOn: AppSyncGraphQLApi
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource:
              - !Join ['/', [!GetAtt AppSyncGraphQLApi.Arn, '*']]
      PolicyName: !Sub ${StackName}-appsync-iam-policy
      Roles:
        - !Sub ${IdentityPoolAuthorizedIAMRoleRef}

  AppSyncDynamoDBIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}-appsync-dynamodb-iam-role
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBIAMManagedPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBIAMManagedPolicy

  AppSyncDynamoDBIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource:
              - !Join ['', [!Sub '${StocksPriceDynamoDBTableArn}', '*']]
              - !Join ['', [!Sub '${UsersDynamoDBTableArn}', '*']]
              - !Join ['', [!Sub '${InvestmentsDynamoDBTableArn}', '*']]

Outputs:
  AppSyncGraphQLApiEndpoint:
    Description: AppSync GraphQL API Endpoint
    Value: !GetAtt AppSyncGraphQLApi.GraphQLUrl
