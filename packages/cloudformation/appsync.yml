# @format

AWSTemplateFormatVersion: '2010-09-09'

Description: AppSync GraphQLApi AWS Cloudformation

Parameters:
  StackName:
    Type: String

  UserPoolId:
    Type: String

  StocksPriceDynamoDBTableRef:
    Type: String

  StocksPriceDynamoDBTableArn:
    Type: String

  UsersDynamoDBTableRef:
    Type: String

  UsersDynamoDBTableArn:
    Type: String

  InvestmentsDynamoDBTableRef:
    Type: String

  InvestmentsDynamoDBTableArn:
    Type: String

  IdentityPoolAuthorizedIAMRoleRef:
    Type: String

Resources:
  AppSyncGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Description: AppSync GraphQLApi
    Properties:
      AuthenticationType: AWS_IAM
      Name: !Sub ${StackName}-appsync-graphqlapi
      UserPoolConfig:
        UserPoolId: !Sub ${UserPoolId}
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: 'ALLOW'

  AppSyncGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      DefinitionS3Location: s3://my-finances-cloudformation/appsync-schema.graphql

  ## Functions
  # A
  AddPortfolioStockAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: AddPortfolioStockAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        #set($portfolioStocksGroupId = $ctx.stash.portfolioStocksGroupId)        
        #set($data = $ctx.stash.input)
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocksGroup_$portfolioStocksGroupId" }
          },
          "update": {
            "expression": "SET stocks = list_append(if_not_exists(stocks, :emptyList), :stockData)",
            #set($stockData = "$data.ticker")
            #set($stockData = "$stockData $data.date")
            #set($stockData = "$stockData $data.type")
            #set($stockData = "$stockData $data.value")
            #set($stockData = "$stockData $data.quantity")
            "expressionValues": {
              ":stockData": $util.dynamodb.toDynamoDBJson([ $stockData ]),
              ":emptyList": { "L": [] }
            }
          }
        }
      ResponseMappingTemplate: |
        #set($ctx.stash.hashKey = $ctx.result.hashKey)
        #set($ctx.stash.portfolioStocks = $ctx.result.stocks)
        $util.toJson($ctx.result.stocks)

  AllUserPortfoliosAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: AllUserPortfoliosAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: !Sub
        - |
          {
            "version": "2018-05-29",
            "operation": "BatchGetItem",
            #set($keys = [])
            #foreach($portfolioMetadata in $ctx.stash.userPortfoliosMetadata)
              #set($portfolioId = $portfolioMetadata.hashKey)
              $util.qr($keys.add({
                "hashKey": { "S" : "$portfolioId" },
                "rangeKey": { "S" : "details" }
              }))
            #end
            #if( $keys.isEmpty() )
              $util.qr($keys.add({
                "hashKey": { "S" : "fakeId" },
                "rangeKey": { "S" : "details" }
              }))
            #end
            "tables" : {
              "${TableName}": {
                "keys": $util.toJson($keys)
              }
            }
          }
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }
      ResponseMappingTemplate: !Sub
        - |
          #set($portfolios = $ctx.result.data["${TableName}"])
          #foreach($portfolio in $portfolios)
            #foreach($portfolioMetadata in $ctx.stash.userPortfoliosMetadata)
              #if($portfolio.hashKey == $portfolioMetadata.hashKey)
                #set($portfolio.id = $portfolio.hashKey)
                #set($portfolio.participation = $portfolioMetadata.participation)
              #end
            #end
          #end
          #if( !$portfolios[0] )
            $util.toJson([])
          #else
            $util.toJson($portfolios)
          #end
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }

  AllUserPortfoliosMetadataAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: AllUserPortfoliosMetadataAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($userId = $ctx.stash.userId)
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "index": "range-key-index",
          "query" : {
            "expression" : "rangeKey = :rangeKey",
            "expressionValues" : {
              ":rangeKey" : { "S" : "user_$userId" }
            }
          }
        }
      ResponseMappingTemplate: |
        #set($ctx.stash.userPortfoliosMetadata = $ctx.result.items)
        $util.toJson($ctx.result.items)

  # B
  # C
  # D
  DeletePortfolioStocksGroupAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: DeletePortfolioStocksGroupAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        #set($portfolioStocksGroupId = $ctx.stash.portfolioStocksGroupId)
        {
          "version" : "2017-02-28",
          "operation" : "DeleteItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocksGroup_$portfolioStocksGroupId" }
          }
        }
      ResponseMappingTemplate: |
        #set($deletedPortfolioStocksGroup = $ctx.result)
        #set($deletedPortfolioStocksGroup.id = $ctx.result.rangeKey.split("_")[1])
        #set($ctx.stash.deletedPortfolioStocksGroup = $deletedPortfolioStocksGroup)
        $util.toJson($deletedPortfolioStocksGroup)

  # M
  MapPortfolioStockAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: MapPortfolioStockAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt NoneAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
        }
      ResponseMappingTemplate: |
        #set($stocks = [])
        #foreach( $stock in $ctx.stash.portfolioStocks )
          #set($stockSubstrings = $stock.split(" "))
          #set($stockObj = {
            "id": $foreach.index,
            "index": $foreach.index,
            "ticker": $stockSubstrings[0],
            "date": $stockSubstrings[1],
            "type": $stockSubstrings[2],
            "value": $stockSubstrings[3],
            "quantity": $stockSubstrings[4]
          })
          $util.qr($stocks.add($stockObj))
        #end
        #set($ctx.stash.portfolioStocks = $stocks)
        $util.toJson($stocks)

  MostRecentStockPriceAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: MostRecentStockPriceAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
            "expression" : "hashKey = :hashKey",
            "expressionValues" : {
              ":hashKey" : { "S" : "$ctx.stash.ticker" }
            }
          },
          "limit": 1,
          "scanIndexForward": false
        }
      ResponseMappingTemplate: |
        #set( $item = $ctx.result.items[0] )
        #set( $res = {
          "ticker": $item.hashKey,
          "date": $item.rangeKey,
          "price": $item.price
        })
        #set( $ctx.stash.mostRecentStockPrice = $res )
        $util.toJson($res)

  # N
  NewPortfolioAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: NewPortfolioAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: !Sub
        - |
          #set($portfolioId = $ctx.stash.portfolioId)
          #set($portfolioName = $ctx.stash.portfolioName)
          #set($userId = $ctx.stash.userId)
          #set($current = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "current"
          })
          #set($details = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "details",
            "name": "$portfolioName",
            "createdAt": "$util.time.nowISO8601()"
          })
          #set($user = {
            "hashKey" : "$portfolioId",
            "rangeKey" : "user_$userId",
            "participation" : "owner"
          })
          #set($items = [
            $util.dynamodb.toMapValues($details),
            $util.dynamodb.toMapValues($current),
            $util.dynamodb.toMapValues($user)
          ])
          {
            "version" : "2018-05-29",
            "operation" : "BatchPutItem",
            "tables" : {
              "${TableName}": $util.toJson($items)
            }
          }
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }
      ResponseMappingTemplate: !Sub
        - |
          #set($newPortfolio = $ctx.result.data["${TableName}"][0])
          #set($newPortfolio.id = $ctx.stash.portfolioId)
          #set($newPortfolio.participation = "owner")
          #set($ctx.stash.newPortfolio = $newPortfolio)
          $util.toJson($newPortfolio)
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }

  NewPortfolioStocksGroupAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: NewPortfolioStocksGroupAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        #set($portfolioStocksGroupId = $util.autoId())
        #set($portfolioStocksGroupName = $ctx.stash.portfolioStocksGroupName)
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocksGroup_$portfolioStocksGroupId" }
          },
          "attributeValues" : {
            "name": { "S" : "$portfolioStocksGroupName" },
          }
        }
      ResponseMappingTemplate: |
        #set($newPortfolioStocksGroup = $ctx.result)
        #set($newPortfolioStocksGroup.id = $ctx.result.rangeKey.split("_")[1])
        #set($ctx.stash.newPortfolioStocksGroup = $newPortfolioStocksGroup)
        $util.toJson($newPortfolioStocksGroup)

  # O
  # P
  PortfolioStocksAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: PortfolioStocksAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocks" }
          }
        }
      ResponseMappingTemplate: |
        #set($ctx.stash.portfolioStocks = $ctx.result.stocks)
        $util.toJson($ctx.result.stocks)

  PortfolioStocksGroupsAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: PortfolioStocksGroupsAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
            "expression" : "hashKey = :hashKey AND begins_with(rangeKey, :rangeKey)",
            "expressionValues" : {
              ":hashKey" : { "S" : "$portfolioId" },
              ":rangeKey" : { "S" : "stocksGroup" },
            }
          }
        }
      ResponseMappingTemplate: |
        #set($portfolioStocksGroups = $ctx.result.items)
        #foreach($portfolioStocksGroup in $portfolioStocksGroups)
          #set($portfolioStocksGroup.id = $portfolioStocksGroup.rangeKey.split("_")[1])
        #end
        #set($ctx.stash.portfolioStocksGroups = $portfolioStocksGroups)
        $util.toJson($portfolioStocksGroups)

  # Q

  # R
  RemovePortfolioStockAppSyncFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: RemovePortfolioStockAppSyncFunctionConfiguration
      FunctionVersion: 2018-05-29
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        #set($portfolioId = $ctx.stash.portfolioId)
        #set($index = $ctx.stash.index)
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "$portfolioId" },
            "rangeKey": { "S" : "stocks" }
          },
          "update": {
            "expression": "REMOVE stocks[$index]",
          }
        }
      ResponseMappingTemplate: |
        #set($ctx.stash.hashKey = $ctx.result.hashKey)
        #set($ctx.stash.portfolioStocks = $ctx.result.stocks)
        $util.toJson($ctx.result.stocks)

  # S
  # T
  # U
  # V
  # W
  # X
  # Y
  # Z

  ## User
  # portfolios
  PortfoliosUserAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AllUserPortfoliosMetadataAppSyncFunctionConfiguration
      - AllUserPortfoliosAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: User
      FieldName: portfolios
      Kind: PIPELINE
      RequestMappingTemplate: |
        $util.qr($ctx.stash.put("userId", $ctx.source.id))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt AllUserPortfoliosMetadataAppSyncFunctionConfiguration.FunctionId
          - !GetAtt AllUserPortfoliosAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ## Portfolio
  # stocksGroup
  StocksGroupsPortfolioAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - PortfolioStocksGroupsAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Portfolio
      FieldName: stocksGroups
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.portfolioId = $ctx.source.id)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt PortfolioStocksGroupsAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # # PortfolioStocksGroup
  StocksPortfolioStocksGroupAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - PortfolioStocksAppSyncFunctionConfiguration
      - MapPortfolioStockAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: PortfolioStocksGroup
      FieldName: stocks
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.portfolioStocks = $ctx.source.stocks)
        {}
      PipelineConfig:
        Functions:
          # - !GetAtt PortfolioStocksAppSyncFunctionConfiguration.FunctionId
          - !GetAtt MapPortfolioStockAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ## PortfolioStock
  # lastPrice
  LastPricePortfolioStockAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - MostRecentStockPriceAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: PortfolioStock
      FieldName: lastPrice
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.ticker = $ctx.source.ticker)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt MostRecentStockPriceAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.price)

  ## Mutation
  # newPortfolio
  NewPortfolioMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: NewPortfolioAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: newPortfolio
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($id = $util.autoId())
        $util.qr($ctx.stash.put("portfolioId", $id))
        $util.qr($ctx.stash.put("portfolioName", $ctx.args.input.name))
        $util.qr($ctx.stash.put("userId", $ctx.args.userId))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt NewPortfolioAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.newPortfolio)

  # newPortfolioStocksGroup
  NewPortfolioStocksGroupMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: NewPortfolioStocksGroupAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: newPortfolioStocksGroup
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.portfolioId = $ctx.args.portfolioId)
        #set($ctx.stash.portfolioStocksGroupName = $ctx.args.input.name)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt NewPortfolioStocksGroupAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.newPortfolioStocksGroup)

  # deletePortfolioStocksGroup
  DeletePortfolioStocksGroupMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: DeletePortfolioStocksGroupAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: deletePortfolioStocksGroup
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.portfolioId = $ctx.args.portfolioId)
        #set($ctx.stash.portfolioStocksGroupId = $ctx.args.portfolioStocksGroupId)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt DeletePortfolioStocksGroupAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.deletedPortfolioStocksGroup)

  # addPortfolioStock
  AddPortfolioStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - AddPortfolioStockAppSyncFunctionConfiguration
      - MapPortfolioStockAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addPortfolioStock
      Kind: PIPELINE
      RequestMappingTemplate: |
        $util.qr($ctx.stash.put("portfolioId", $ctx.args.portfolioId))
        $util.qr($ctx.stash.put("portfolioStocksGroupId", $ctx.args.portfolioStocksGroupId))
        $util.qr($ctx.stash.put("input", $ctx.args.input))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt AddPortfolioStockAppSyncFunctionConfiguration.FunctionId
          - !GetAtt MapPortfolioStockAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.portfolioStocks)

  # registerStock
  RegisterStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: registerStock
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          },
          "update" : {
            "expression" : "SET #ticker = :ticker",
            "expressionNames" : {
                "#ticker" : "$ctx.args.stockMetadata.ticker"
            },
            "expressionValues" : {
                ":ticker" : $util.dynamodb.toDynamoDBJson($ctx.args.stockMetadata)
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.args.stockMetadata)

  # removePortfolioStock
  RemovePortfolioStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - RemovePortfolioStockAppSyncFunctionConfiguration
      - MapPortfolioStockAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: removePortfolioStock
      Kind: PIPELINE
      RequestMappingTemplate: |
        $util.qr($ctx.stash.put("portfolioId", $ctx.args.portfolioId))
        $util.qr($ctx.stash.put("index", $ctx.args.index))
        {}
      PipelineConfig:
        Functions:
          - !GetAtt RemovePortfolioStockAppSyncFunctionConfiguration.FunctionId
          - !GetAtt MapPortfolioStockAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.portfolioStocks)

  # unregisterStock
  UnregisterStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: unregisterStock
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          },
          "update" : {
            "expression" : "REMOVE $ctx.args.ticker",
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.args.ticker)

  ## Query
  # allRegisteredStocks
  AllRegisteredStocksQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: allRegisteredStocks
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          }
        }
      ResponseMappingTemplate: |
        #set ($tickers = [])
        #foreach( $item in $ctx.result.values() )
          #if( $item.ticker)
            $util.qr($tickers.add($item))
          #end
        #end
        $util.toJson($tickers)

  # mostRecentStockPrice
  MostRecentStockPriceQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: MostRecentStockPriceAppSyncFunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: mostRecentStockPrice
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($ctx.stash.ticker = $ctx.args.ticker)
        {}
      PipelineConfig:
        Functions:
          - !GetAtt MostRecentStockPriceAppSyncFunctionConfiguration.FunctionId
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # portfolio
  PortfolioQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: portfolio
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
            "hashKey" : { "S" : "$ctx.args.id" },
            "rangeKey": { "S" : "details" }
          }
        }
      ResponseMappingTemplate: |
        #set($portfolio = $ctx.result)
        #set($portfolio.id = $portfolio.hashKey)
        $util.toJson($portfolio)

  # user
  UserQueryAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: user
      DataSourceName: !GetAtt NoneAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "payload": $utils.toJson($ctx.args)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ### DataSource
  NoneAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: DataSource
      Description: AppSync None data source
      Type: NONE

  StocksPriceAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: StocksPriceAppSyncDataSource
      Description: AppSync data source for stocks price
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${StocksPriceDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  UsersAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: UsersAppSyncDataSource
      Description: AppSync data source for user data
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${UsersDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  InvestmentsAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: InvestmentsAppSyncDataSource
      Description: AppSync data source for investments
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${InvestmentsDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  ### IAM ###
  AppSyncIAMPolicy:
    Type: AWS::IAM::Policy
    Description: Allow user consume AppSync when signed in
    DependsOn: AppSyncGraphQLApi
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource:
              - !Join ['/', [!GetAtt AppSyncGraphQLApi.Arn, '*']]
      PolicyName: !Sub ${StackName}-appsync-iam-policy
      Roles:
        - !Sub ${IdentityPoolAuthorizedIAMRoleRef}

  AppSyncDynamoDBIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}-appsync-dynamodb-iam-role
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBIAMManagedPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBIAMManagedPolicy

  AppSyncDynamoDBIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource:
              - !Join ['', [!Sub '${StocksPriceDynamoDBTableArn}', '*']]
              - !Join ['', [!Sub '${UsersDynamoDBTableArn}', '*']]
              - !Join ['', [!Sub '${InvestmentsDynamoDBTableArn}', '*']]

Outputs:
  AppSyncGraphQLApiEndpoint:
    Description: AppSync GraphQL API Endpoint
    Value: !GetAtt AppSyncGraphQLApi.GraphQLUrl
