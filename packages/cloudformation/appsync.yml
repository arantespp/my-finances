# @format

AWSTemplateFormatVersion: '2010-09-09'

Description: AppSync GraphQLApi AWS Cloudformation

Parameters:
  StackName:
    Type: String

  UserPoolId:
    Type: String

  StocksPriceDynamoDBTableRef:
    Type: String

  StocksPriceDynamoDBTableArn:
    Type: String

  UsersDynamoDBTableRef:
    Type: String

  UsersDynamoDBTableArn:
    Type: String

  InvestmentsDynamoDBTableRef:
    Type: String

  InvestmentsDynamoDBTableArn:
    Type: String

  IdentityPoolAuthorizedIAMRoleRef:
    Type: String

Resources:
  AppSyncGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Description: AppSync GraphQLApi
    Properties:
      AuthenticationType: AWS_IAM
      Name: !Sub ${StackName}-appsync-graphqlapi
      UserPoolConfig:
        UserPoolId: !Sub ${UserPoolId}
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: 'ALLOW'

  AppSyncGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Definition: |
        type StockMetadata {
          AlphaVantageSymbol: String!
          ticker: String!
        }
        input StockMetadataInput {
          AlphaVantageSymbol: String!
          ticker: String!
        }
        type StockPrice {
          ticker: String!
          date: AWSDateTime!
          price: Float!
        }
        input StockPriceInput {
          ticker: String!
          date: AWSDateTime!
          price: Float!
        }
        type Portfolio {
          id: ID!
          name: String!
          createdAt: AWSDateTime!
        }
        enum PortfolioView {
          viewOnly
          participate
        }
        type Mutation {
          registerStock(stockMetadata: StockMetadataInput!): StockMetadata!
          unregisterStock(ticker: String!): String!
          newPortfolio(userId: ID!, portfolioName: String!): String!
          deletePortfolio(portfolioId: ID!): String!
          allowUserToViewPortfolio(userId: ID!, portfolioId: ID!, kind: PortfolioView!): Boolean!
        }
        type Query {
          allRegisteredStocks: [StockMetadata]!
          mostRecentStockPrice(ticker: String!): StockPrice!
        }
        ## type Subscription {
        ## }
        schema {
          query: Query
          mutation: Mutation
          ## subscription: Subscription
        }

  ## Functions
  # AddPortfolioToUserAppSyncFunctionConfiguration:
  #   Type: AWS::AppSync::FunctionConfiguration
  #   DependsOn: AppSyncGraphQLSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncGraphQLApi.ApiId
  #     Name: AddPortfolioToUserAppSyncFunctionConfiguration
  #     FunctionVersion: 2018-05-29
  #     DataSourceName: !GetAtt UsersAppSyncDataSource.Name
  #     RequestMappingTemplate: |
  #       #set($userId = $ctx.stash.userId)
  #       #set($portfolioId = $ctx.stash.portfolioId)
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "PutItem",
  #         "key" : {
  #           "hashKey" : { "S" : "$userId" },
  #           "rangeKey": { "S" : "portfolio_$portfolioId" }
  #         }
  #       }
  #     ResponseMappingTemplate: |
  #       $util.toJson($ctx.result)

  ## Mutation
  # registerStock
  RegisterStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: registerStock
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          },
          "update" : {
            "expression" : "SET #ticker = :ticker",
            "expressionNames" : {
                "#ticker" : "$ctx.args.stockMetadata.ticker"
            },
            "expressionValues" : {
                ":ticker" : $util.dynamodb.toDynamoDBJson($ctx.args.stockMetadata)
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.args.stockMetadata)

  # unregisterStock
  UnregisterStockMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: unregisterStock
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          },
          "update" : {
            "expression" : "REMOVE $ctx.args.ticker",
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.args.ticker)

  # newPortfolio
  NewPortfolioMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: newPortfolio
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: !Sub
        - |
          #set($id = $util.autoId())
          $util.qr($ctx.stash.put("portfolioId", $id))
          $util.qr($ctx.stash.put("userId", $ctx.args.userId))
          #set($current = {
            "hashKey" : $id,
            "rangeKey" : "current"
          })
          #set($details = {
            "hashKey" : $id,
            "rangeKey" : "details",
            "name": $ctx.args.portfolioName,
            "createdAt": "$util.time.nowISO8601()"
          })
          #set($items = [$util.dynamodb.toMapValues($current), $util.dynamodb.toMapValues($details)] )
          {
            "version" : "2018-05-29",
            "operation" : "BatchPutItem",
            "tables" : {
              "${TableName}": $util.toJson($items)
            }
          }
        - { TableName: !Sub '${InvestmentsDynamoDBTableRef}' }
      ResponseMappingTemplate: |
        $util.toJson($ctx.stash.portfolioId)

  # deletePortfolio
  DeletePortfolioMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: deletePortfolio
      DataSourceName: !GetAtt InvestmentsAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "DeleteItem",
          "key" : {
            "hashKey" : { "S" : "$ctx.args.userId" },
            "rangeKey": { "S" : "portfolio_$id" }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # allowUserToViewPortfolio
  AllowUserToViewPortfolioMutationAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: allowUserToViewPortfolio
      DataSourceName: !GetAtt UsersAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
            "hashKey" : { "S" : "$ctx.args.userId" },
            "rangeKey": { "S" : "portfolio_$ctx.args.portfolioId" }
          },
          "attributeValues" : {
            "kind": { "S" : "$ctx.args.kind" },            
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ## Query
  # allRegisteredStocks
  AllRegisteredStocksAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: allRegisteredStocks
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "GetItem",
          "key" : {
            "hashKey" : { "S" : "metadata" },
            "rangeKey": { "S" : "tickers" }
          }
        }
      ResponseMappingTemplate: |
        #set ($tickers = [])
        #foreach( $item in $ctx.result.values() )
          #if( $item.ticker)	
            $util.qr($tickers.add($item))
          #end
        #end
        $util.toJson($tickers)

  # mostRecentStockPrice
  MostRecentStockPriceAppSyncResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      TypeName: Query
      FieldName: mostRecentStockPrice
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
            "expression" : "hashKey = :hashKey",
            "expressionValues" : {
              ":hashKey" : { "S" : "$ctx.args.ticker" }
            }
          },
          "limit": 1,
          "scanIndexForward": false
        }
      ResponseMappingTemplate: |
        #set( $item = $ctx.result.items[0] )
        $util.toJson({
          "ticker": $item.hashKey,
          "date": $item.rangeKey,
          "price": $item.price
        })

  ### DataSource
  StocksPriceAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: StocksPriceAppSyncDataSource
      Description: AppSync data source for stocks price
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${StocksPriceDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  UsersAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: UsersAppSyncDataSource
      Description: AppSync data source for user data
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${UsersDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  InvestmentsAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncGraphQLApi.ApiId
      Name: InvestmentsAppSyncDataSource
      Description: AppSync data source for investments
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${InvestmentsDynamoDBTableRef}
        AwsRegion: !Sub ${AWS::Region}

  ### IAM ###
  AppSyncIAMPolicy:
    Type: AWS::IAM::Policy
    Description: Allow user consume AppSync when signed in
    DependsOn: AppSyncGraphQLApi
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource:
              - !Join ['/', [!GetAtt AppSyncGraphQLApi.Arn, '*']]
      PolicyName: !Sub ${StackName}-appsync-iam-policy
      Roles:
        - !Sub ${IdentityPoolAuthorizedIAMRoleRef}

  AppSyncDynamoDBIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}-appsync-dynamodb-iam-role
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBIAMManagedPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBIAMManagedPolicy

  AppSyncDynamoDBIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource:
              - !Join ['', [!Sub '${StocksPriceDynamoDBTableArn}', '*']]
              - !Join ['', [!Sub '${UsersDynamoDBTableArn}', '*']]
              - !Join ['', [!Sub '${InvestmentsDynamoDBTableArn}', '*']]

Outputs:
  AppSyncGraphQLApiEndpoint:
    Description: AppSync GraphQL API Endpoint
    Value: !GetAtt AppSyncGraphQLApi.GraphQLUrl
