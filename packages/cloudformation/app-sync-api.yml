# @format

AWSTemplateFormatVersion: '2010-09-09'

Description: AppSync GraphQLApi MyFinances AWS Cloudformation

Parameters:
  MyFinancesCognitoUserPoolClientClientId:
    Type: String

  MyFinancesCognitoUserPoolProviderName:
    Type: String

  MyFinancesCognitoUserPoolId:
    Type: String

  StocksPriceDynamoDBTableRef:
    Type: String

  StocksPriceDynamoDBTableArn:
    Type: String

Resources:
  MyFinancesAppSyncGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Description: My Finances GraphQLApi
    Properties:
      AuthenticationType: AWS_IAM
      Name: my-finances-appsync-graphqlapi
      UserPoolConfig:
        UserPoolId: !Sub ${MyFinancesCognitoUserPoolId}
        AwsRegion: us-east-1
        DefaultAction: 'ALLOW'

  MyFinancesAppSyncGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt MyFinancesAppSyncGraphQLApi.ApiId
      Definition: |
        type Stock {
          ticker: String!
          date: AWSDateTime!
          price: Float!
        }

        input StockInput {
          ticker: String!
          date: AWSDateTime!
          price: Float!
        }

        type Mutation {
          addStockPrice(input: StockInput!): Stock!
        }

        type Query {
          mostRecentStockPrice(ticker: String!): Stock!
        }

        ## type Subscription {
         
        ## }

        schema {
          query: Query
          mutation: Mutation
          ## subscription: Subscription
        }

  ## Mutation
  AddStockPriceMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: MyFinancesAppSyncGraphQLSchema
    Properties:
      ApiId: !GetAtt MyFinancesAppSyncGraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addStockPrice
      DataSourceName: !GetAtt StocksPriceAppSyncDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
            "hashKey" : { "S" : "$ctx.args.input.ticker" },
            "rangeKey": { "S" : "$ctx.args.input.date" }
          }
        }
      ResponseMappingTemplate: |
        #set( $ctx.result.ticker = $ctx.result.hashKey )
        #set( $ctx.result.date = $ctx.result.rangeKey )
        $util.toJson($ctx.result)

  ### DataSource
  StocksPriceAppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt MyFinancesAppSyncGraphQLApi.ApiId
      Name: StocksPriceAppSyncDataSource
      Description: AppSync data source for stocks price
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBIAMRole.Arn
      DynamoDBConfig:
        TableName: !Sub ${StocksPriceDynamoDBTableRef}
        AwsRegion: us-east-1

  ### IAM ###
  AppSyncDynamoDBIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: my-finances-appsync-dynamodb-iam-role
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBIAMManagedPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBIAMManagedPolicy

  AppSyncDynamoDBIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource:
              - !Join ['', [!Sub '${StocksPriceDynamoDBTableArn}', '*']]

  ### Cognito
  MyFinancesCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: MyFinancesCognitoIdentityPool
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Sub ${MyFinancesCognitoUserPoolClientClientId}
          ProviderName: !Sub ${MyFinancesCognitoUserPoolProviderName}

  MyFinancesIdentityPoolUnauthorizedIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: my-finances-identity-pool-unauthorized-iam-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref MyFinancesCognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: MyFinancesCognitoUnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - mobiletargeting:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'
  MyFinancesIdentityPoolAuthorizedIAMRole:
    Type: AWS::IAM::Role
    DependsOn: MyFinancesAppSyncGraphQLApi
    Properties:
      RoleName: my-finances-identity-pool-authorized-iam-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref MyFinancesCognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: MyFinancesCognitoAuthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - mobiletargeting:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource:
                  - !Join ['/', [!GetAtt MyFinancesAppSyncGraphQLApi.Arn, '*']]

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref MyFinancesCognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt MyFinancesIdentityPoolUnauthorizedIAMRole.Arn
        authenticated: !GetAtt MyFinancesIdentityPoolAuthorizedIAMRole.Arn
# Outputs:
#   MyFinancesCognitoUserPoolClientClientId:
#     Value: !Sub ${MyFinancesCognitoUserPoolClientClientId}
#   MyFinancesCognitoUserPoolProviderName:
#     Value: !Sub ${MyFinancesCognitoUserPoolProviderName}
