# @format

type User {
  id: ID!
  portfolios: [Portfolio]!
}
input PortfolioInput {
  name: String!
}
type Portfolio {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  participation: PortfolioParticipation!
  stocksGroups: [PortfolioStocksGroup]!
  # participants: [PortfolioParticipants!]!
  # current: PortfolioData!
}
enum PortfolioParticipation {
  viewOnly
  participate
  owner
}
input PortfolioStocksGroupInput {
  name: String!
}
type PortfolioStocksGroup {
  id: ID!
  name: String!
  stocks: [PortfolioStock]!
}
input PortfolioStockInput {
  ticker: String!
  date: String!
  type: PortfolioStockType!
  value: Float!
  quantity: Int!
}
enum PortfolioStockType {
  ## Buy
  B
  ## Sell
  S
  ## Yield
  Y
}
type PortfolioStock {
  id: ID!
  index: ID!
  ticker: String!
  date: String!
  type: PortfolioStockType!
  value: Float!
  quantity: Int!
  mostRecentPrice: Float
}
type StockMetadata {
  AlphaVantageSymbol: String!
  ticker: String!
}
input StockMetadataInput {
  AlphaVantageSymbol: String!
  ticker: String!
}
type StockPrice {
  ticker: ID!
  date: AWSDateTime!
  price: Float!
}
input StockPriceInput {
  ticker: String!
  date: AWSDateTime!
  price: Float!
}

# type PortfolioParticipants {
#   userId: ID!
#   portfolioView: PortfolioView!
# }

type Mutation {
  newPortfolio(userId: ID!, input: PortfolioInput!): Portfolio!
  newPortfolioStocksGroup(portfolioId: ID!, input: PortfolioStocksGroupInput!): PortfolioStocksGroup!
  deletePortfolioStocksGroup(portfolioId: ID!, portfolioStocksGroupId: ID!): PortfolioStocksGroup!
  addPortfolioStock(portfolioId: ID!, portfolioStocksGroupId: ID!, input: PortfolioStockInput!): [PortfolioStock!]!
  removePortfolioStock(portfolioId: ID!, index: Int!): [PortfolioStock!]!
  # Admin register stock
  registerStock(stockMetadata: StockMetadataInput!): StockMetadata!
  # Admin unregister stock
  unregisterStock(ticker: String!): String!
  # allowUserToViewPortfolio(userId: ID!, portfolioId: ID!, kind: PortfolioView!): Boolean!
}
type Query {
  user(id: ID!): User
  portfolio(id: ID!): Portfolio
  allRegisteredStocks: [StockMetadata]!
  mostRecentStockPrice(ticker: ID!): StockPrice!
}
## type Subscription {
## }
schema {
  query: Query
  mutation: Mutation
  ## subscription: Subscription
}
